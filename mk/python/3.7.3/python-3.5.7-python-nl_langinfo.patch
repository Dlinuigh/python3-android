--- Python3.5.1/Modules/_cursesmodule.c
+++ Python3.5.1-android/Modules/_cursesmodule.c
@@ -525,7 +525,7 @@
             PyOS_snprintf(buffer, sizeof(buffer), "cp%u", cp);
             encoding = buffer;
         }
-#elif defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
         const char *codeset = nl_langinfo(CODESET);
         if (codeset != NULL && codeset[0] != 0)
             encoding = codeset;
--- Python3.5.1/Modules/_localemodule.c
+++ Python3.5.1-android/Modules/_localemodule.c
@@ -439,6 +439,7 @@
     {0, 0}
 };
 
+#ifdef HAVE_NL_LANGINFO
 PyDoc_STRVAR(nl_langinfo__doc__,
 "nl_langinfo(key) -> string\n"
 "Return the value for the locale information associated with key.");
@@ -463,7 +464,7 @@
     PyErr_SetString(PyExc_ValueError, "unsupported langinfo constant");
     return NULL;
 }
-#endif /* HAVE_LANGINFO_H */
+#endif /* HAVE_NL_LANGINFO */
 
 #ifdef HAVE_LIBINTL_H
 
@@ -595,7 +596,7 @@
 #if defined(MS_WINDOWS)
   {"_getdefaultlocale", (PyCFunction) PyLocale_getdefaultlocale, METH_NOARGS},
 #endif
-#ifdef HAVE_LANGINFO_H
+#if defined(HAVE_NL_LANGINFO)
   {"nl_langinfo", (PyCFunction) PyLocale_nl_langinfo,
    METH_VARARGS, nl_langinfo__doc__},
 #endif
--- Python3.5.1/Python/fileutils.c
+++ Python3.5.1-android/Python/fileutils.c
@@ -60,7 +60,7 @@
        has no console */
     if (cp != 0)
         return PyUnicode_FromFormat("cp%u", (unsigned int)cp);
-#elif defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
     {
         char *codeset = nl_langinfo(CODESET);
         if (codeset != NULL && codeset[0] != 0)
@@ -102,7 +102,7 @@
 check_force_ascii(void)
 {
     char *loc;
-#if defined(HAVE_LANGINFO_H) && defined(CODESET)
+#if defined(HAVE_NL_LANGINFO) && defined(CODESET)
     char *codeset, **alias;
     char encoding[100];
     int is_ascii;
--- Python3.5.1/Python/pylifecycle.c
+++ Python3.5.1-android/Python/pylifecycle.c
@@ -216,7 +216,7 @@
     char codepage[100];
     PyOS_snprintf(codepage, sizeof(codepage), "cp%d", GetACP());
     return get_codec_name(codepage);
-#elif defined(HAVE_LANGINFO_H) && defined(CODESET)
+#elif defined(HAVE_NL_LANGINFO) && defined(CODESET)
     char* codeset = nl_langinfo(CODESET);
     if (!codeset || codeset[0] == '\0') {
         PyErr_SetString(PyExc_ValueError, "CODESET is not set or empty");
--- Python3.5.1/configure.ac
+++ Python3.5.1-android/configure.ac
@@ -3223,7 +3223,7 @@
  if_nameindex \
  initgroups kill killpg lchmod lchown lockf linkat lstat lutimes mmap \
  memrchr mbrtowc mkdirat mkfifo \
- mkfifoat mknod mknodat mktime mremap nice openat pathconf pause pipe2 plock poll \
+ mkfifoat mknod mknodat mktime mremap nice nl_langinfo openat pathconf pause pipe2 plock poll \ 
  posix_fallocate posix_fadvise pread \
  pthread_init pthread_kill putenv pwrite readlink readlinkat readv realpath renameat \
  select sem_open sem_timedwait sem_getvalue sem_unlink sendfile setegid seteuid \
--- Python3.5.1/Lib/_bootlocale.py
+++ Python3.5.1-android/Lib/_bootlocale.py
@@ -12,7 +12,7 @@
         return _locale._getdefaultlocale()[1]
 else:
     try:
-        _locale.CODESET
+        _locale.nl_langinfo, _locale.CODESET
     except AttributeError:
         def getpreferredencoding(do_setlocale=True):
             # This path for legacy systems needs the more complex
--- Python3.5.1/Lib/locale.py
+++ Python3.5.1-android/Lib/locale.py
@@ -611,9 +611,9 @@
         import _bootlocale
         return _bootlocale.getpreferredencoding(False)
 else:
-    # On Unix, if CODESET is available, use that.
+    # On Unix, if both nl_langinfo and CODESET are available, use them.
     try:
-        CODESET
+        nl_langinfo, CODESET
     except NameError:
         # Fall back to parsing environment variables :-(
         def getpreferredencoding(do_setlocale = True):
